import math
import os
import requests
import itertools
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_percentage_error
import numpy as np

# checking ../Data directory presence
if not os.path.exists('../Data'):
    os.mkdir('../Data')

# download data if it is unavailable
if 'data.csv' not in os.listdir('../Data'):
    url = "https://www.dropbox.com/s/3cml50uv7zm46ly/data.csv?dl=1"
    r = requests.get(url, allow_redirects=True)
    open('../Data/data.csv', 'wb').write(r.content)

def load_data():
    data = pd.read_csv('../Data/data.csv')
    x = data.drop('salary', axis=1)
    y = pd.Series(data['salary'])
    return x, y

def train_linear_regression(x_train, y_train):
    model = LinearRegression()
    model.fit(x_train, y_train)
    return model

def find_highly_correlated_features(x, threshold=0.2):
    corr_matrix = x.corr()
    correlated_features = set()
    for i in range(len(corr_matrix.columns)):
        for j in range(len(corr_matrix.columns)):
            if i != j and abs(corr_matrix.iloc[i, j]) > threshold:
                feature_name = corr_matrix.columns[i]
                correlated_features.add(feature_name)
    return correlated_features

def generate_combinations(correlated_features):
    combinations = []
    for i in range(1, len(correlated_features)):
        combinations.extend(list(itertools.combinations(correlated_features, i)))
    return combinations

def best_mape():
    x, y = load_data()
    correlated_features = find_highly_correlated_features(x)
    combinations = generate_combinations(correlated_features)
    best_mape = math.inf
    best_model = None
    predictions = None
    test_y = None

    for combination in combinations:
        x_drop = x.drop(list(combination), axis=1)
        x_train, x_test, y_train, y_test = train_test_split(x_drop, y, test_size=0.3, random_state=100)
        model = train_linear_regression(x_train, y_train)
        y_pred = model.predict(x_test)
        mape_score = mean_absolute_percentage_error(y_test, y_pred)

        if mape_score < best_mape:
            best_mape = mape_score
            best_model = model
            predictions = y_pred
            test_y = y_test

    return best_model, predictions, test_y
def main():
    model, y_pred, y_test = best_mape()
    y_pred1 = np.clip(y_pred, a_min=0, a_max=None)
    mape_score1 = mean_absolute_percentage_error(y_test, y_pred1)
    k = np.median(y_test)
    y_pred2 = np.clip(y_pred, a_min=k, a_max=None)
    mape_score2 = mean_absolute_percentage_error(y_test, y_pred2)
    mape = min(mape_score2, mape_score1)
    print(round(mape, 5))
if __name__ == '__main__':
    main()
